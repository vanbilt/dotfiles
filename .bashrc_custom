#!/bin/bash
# shellcheck source=/dev/null

source ~/.fancy-bash.sh
source ~/.aliases.sh
source ~/.functions.sh

function trimBranchName {
  local branchName="$1"
  local branchNameLength=${#branchName}
  local maxBranchNameLength=20
  local trimmedBranchName="$branchName"

  if (( branchNameLength > maxBranchNameLength )); then
    local trimmedBranchName="${branchName:0:maxBranchNameLength-3}..."
  fi

  echo "$trimmedBranchName"
}

# from James
function join_array { local IFS="$1"; shift; echo "$*"; }

# from James
function ellipsedPath {
  local w=""
  local paths=""
  OIFS="$IFS"
  IFS=" "
  read -r -a paths <<< "$(echo "$PWD" | tr "/" " ")"

  wai=$(whoami)
  if [ "${paths[0]}" == "home" ] && [ "${paths[1]}" == "${wai}" ]; then
    w='~'
    read -r -a paths <<< "${paths[*]:2}"
  else
    w="/${paths[0]}"
    read -r -a paths <<< "${paths[*]:1}"
  fi;

  if (( ${#paths[@]} >= 3 )); then
    w="$w/..."
    read -r -a paths <<< "${paths[@]: -2}"
  fi;

  w=$(join_array '/' "$w" "${paths[@]}")
  IFS="$OIFS"

  echo "$w"
}

export PS1_GREEN="\[\033[32m\]"
export PS1_HOTPINK="\[\033[38;5;205m\]"
export PS1_YELLOW="\[\033[33m\]"

export PS1_BOLD="\[\033[1m\]"
export PS1_ITALICS="\[\033[3m\]"
export PS1_NONE="\[\033[0m\]"

COLOR=""
BRANCH=""
STATE=""
REMOTE=""

# derived from https://gist.github.com/alampros/1035915
# refactor color & state into a function
function parse_git_for_variables {
	git rev-parse --git-dir &> /dev/null
	git_status="$(git status 2> /dev/null)"
  clean_pattern="working tree clean"
	branch_pattern="^On branch ([^${IFS}]*)"
	remote_pattern="Your branch is (.*) of"
	diverge_pattern="Your branch and (.*) have diverged"
  dirty_pattern="not staged for commit"

	if [[ ${git_status} =~ ${clean_pattern} ]];
  then
    COLOR="${PS1_GREEN}"
		STATE="${CHECK_MARK}"
	fi

  if [[ ${git_status} =~ ${dirty_pattern} ]];
  then
    COLOR="${PS1_YELLOW}"
    STATE="${PS1_YELLOW}${WARNING_SIGN}${PS1_NONE}"
  fi

	if [[ ${git_status} =~ ${remote_pattern} ]];
  then
		if [[ ${BASH_REMATCH[1]} == "ahead" ]];
    then
			REMOTE="${PS1_GREEN}${ARROW_UP}${PS1_NONE}"
		else
			REMOTE="${PS1_YELLOW}${ARROW_DOWN}${PS1_NONE}"
		fi
	fi

	if [[ ${git_status} =~ ${diverge_pattern} ]];
  then
		REMOTE="${PS1_YELLOW}${ARROW_UP_DOWN}${PS1_NONE}"
	fi

  # better git/branch symbol? http://www.whiteboardcoder.com/2016/03/sbt-customize-shell-prompt-with-git.html
	if [[ ${git_status} =~ ${branch_pattern} ]];
  then
		BRANCH=${BASH_REMATCH[1]}
    GIT_INFO="(${COLOR}${REMOTE} ${STATE}${PS1_NONE} )"
    PSI="${PS1_BLUE}${PS1_BOLD}${NEPTUNE} >${PS1_NONE} "
  else
    BRANCH=""
    PSI="${PS1_BLUE}${PS1_BOLD}$ >${PS1_NONE} "
	fi
}

# derived from https://gist.github.com/alampros/1035915
function prompt_func() {
  parse_git_for_variables

  prompt="${PS1_HOTPINK}\\u${PS1_NONE} :: ${PS1_ITALICS}$(ellipsedPath)${PS1_NONE}"

  if [ -z "$BRANCH" ];
  then
    PS1="${prompt} ${PSI}"
  else
    PS1="${prompt} $(echo -e "${GIT_INFO}") \n $(trimBranchName "$BRANCH") $(echo -e "${PSI}")"
  fi
}

PROMPT_COMMAND=prompt_func

export SUDO_EDITOR="/usr/bin/gedit"

# set PATH so it includes user's private bin directories
PATH=$PATH:$HOME/bin:$HOME/.local/bin:$HOME/.local/scripts
