#!/bin/bash
########################
#                      #
# CUSTOM BASH COMMANDS #
#                      #
########################

# COLORS
BLUE='\033[34m'
BOLD='\033[1m'
CYAN='\033[36m'
GRAY='\033[30m'
GREEN='\033[32m'
INDIGO='\033[38;5;27m'
ITALICS='\033[3m'
NONE='\033[0m'
ORANGE='\033[38;5;208m'
PURPLE='\033[35m'
RED='\033[31m'
WHITE='\033[37m'
YELLOW='\033[33m'
HOTPINK='\033[38;5;205m'

# ALIAS
# directories
alias skypew='skype -d globodon'
alias skypep='skype -d gmail'

PORTABLE="$HOME/portable"
DEV="$HOME/dev"
alias vanbilt='cd ${DEV}/vanbilt';
alias globodon='cd ~/dev/globodon';

alias tilbilt='tlx -t vanbilt -d ${DEV}/vanbilt/'
alias tiltools='tlx -t "dm helper" -d ${DEV}/vanbilt/bash-docker-tools/ -c ./tools-menu.sh'

alias tilglobo='tlx -t globodon -d ${DEV}/globodon/'
alias tildm='tlx -t "dm src" -d ${DEV}/globodon/dataminer-eric'
alias tilpro='tlx -t "protractor" -d ${DEV}/globodon/dataminer-eric/web/src/test/js/'
alias tildata='tlx -t "data-afdp src" -d ${DEV}/globodon/data-afdp/'
alias tilbrb='tlx -t "brb web src" -d ${DEV}/globodon/brbweb/'

alias gitbare='/usr/bin/git --git-dir=$HOME/dotfiles/ --work-tree=$HOME'

# make a directory and then cd into it
function mkcd () {
  mkdir -p -- "$1" && cd -P -- "$1" || return;
}

# make the primary Prompt String (PS1) for this terminal different than the default
setps1() {
  # UPPER case
  case ${1^^} in
  "R" | "RED")
    ps1color=$RED
    ;;
  "O" | "ORANGE")
    ps1color=$ORANGE
    ;;
  "Y" | "YELLOW")
    ps1color=$YELLOW
    ;;
  "G" | "GREEN")
    ps1color=$GREEN
    ;;
  "B" | "BLUE")
    ps1color=$BLUE
    ;;
  "I" | "INDIGO")
    ps1color=$CYAN
    ;;
  "V" | "VIOLET")
    ps1color=$PURPLE
    ;;
  *)
    ps1color=$HOTPINK
    ;;
  esac

  ps="export PS1='${BOLD}${ps1color}_${2} ::>${NONE} '"
  eval "${ps}"
}

# commands
# system
function supdawg () {
  # supdawg came from accidentally typing SUPDATE=(sudo apt update) a lot

  echo -e "\n  ${GREEN}EXECUTING: ${NONE}sudo apt update\n"
  UPDATE=$( sudo apt update 2>&1 )

  # no need to run any further commands if: "All packages are up to date."
  match='All packages are up to date.'
  if [[ -z "${UPDATE}" ]] || [[ $UPDATE == *$match* ]]; then
    echo -e "${CYAN}  It appears all packages are currently up-to-date${NONE}\n"
  else
    echo -e "${CYAN}  It appears some packages can be updated.${NONE}"
    echo -e "\n  ${GREEN}EXECUTING: ${NONE}apt list --upgradable\n"
    apt list --upgradable
  fi
}

function myip () {
  if [ "$1" == 'i' ]; then
    IP=$(hostname -I | cut -d' ' -f1);
    echo -e "${GREEN}${BOLD}Internal IP${NONE} is: ${BLUE}${BOLD}$IP";
  else
    IP=$(curl -s ipinfo.io/ip);
    echo -e "${GREEN}${BOLD}External IP${NONE} is:${BLUE}${BOLD} $IP";
  fi
}

function cd {
  builtin cd "$@" && ls -al
}

LABEL=RealApps
UUID=0EB4-94A2
function mount-ext {
  if lsblk -f | grep -wq $UUID; then
    echo -e "  ${GREEN}${BOLD}Successfully located${NONE} ${BLUE}${BOLD}Label${NONE}: $LABEL / ${BLUE}${BOLD}UUID:${NONE} $UUID."
    echo -e "  ${BOLD}Mounting for local use at: ${BLUE}$PORTABLE${NONE}"
    mkdir -p "$PORTABLE"
    sudo mount -t vfat -U 0EB4-94A2 "$PORTABLE" -o uid=1000,gid=1000,utf8,dmask=027,fmask=137
  else
    echo -e "  ${RED}${BOLD}Unable to locate:${NONE} $LABEL (UUID: $UUID).${NONE}"
    echo -e "  ${YELLOW}${ITALICS}If it is physically connected it needs to be disconnected and reconnected.${NONE}"
  fi
}

function umount-ext {
  sudo umount /dev/disk/by-uuid/$UUID
  sudo eject /dev/disk/by-uuid/$UUID
  echo -e "  ${BOLD}$LABEL has been unmounted and ejected.${NONE} ${GREEN}${BOLD}It is now safe to remove the device.${NONE}"
}

# git
alias gs='git status || ls -la'
alias atgloboconfig='git config --local user.email "avandrey@globodon.com"'
alias atgithubconfig='git config --local user.email "aaron.vandrey@gmail.com"'

function alias-help () {
  echo -e "  ${GREEN}skypew[ork]${NONE}:     ${BOLD}${BLUE}Skype${NONE} - signed into ${ITALICS}${YELLOW}Globodon${NONE} account"
  echo -e "  ${GREEN}skypep[ersonal]${NONE}: ${BOLD}${BLUE}Skype${NONE} - signed into ${ITALICS}${YELLOW}Gmail${NONE} account"
  echo ""
  echo -e "  ${GREEN}vanbilt${NONE}:         ${BOLD}${BLUE}cd${NONE} into ${ITALICS}${YELLOW}\`/home/vanbilt/dev/vanbilt\`${NONE}"
  echo -e "  ${GREEN}globodon${NONE}:        ${BOLD}${BLUE}cd${NONE} into ${ITALICS}${YELLOW}\`/home/vanbilt/dev/globodon\`${NONE}"
  echo ""
  echo -e "  ${GREEN}tilbilt${NONE}:         New ${BOLD}${BLUE}Tilix${NONE} tab, working directory ${ITALICS}${YELLOW}\`vanbilt\`${NONE}"
  echo -e "  ${GREEN}tiltools${NONE}:        New ${BOLD}${BLUE}Tilix${NONE} tab, working directory ${ITALICS}${YELLOW}\`vanbilt/bash-docker-tools\`${NONE}"
  echo ""
  echo -e "  ${GREEN}tilglobo${NONE}:        New ${BOLD}${BLUE}Tilix${NONE} tab, working directory ${ITALICS}${YELLOW}\`globodon\`${NONE}"
  echo -e "  ${GREEN}tildm${NONE}:           New ${BOLD}${BLUE}Tilix${NONE} tab, working directory ${ITALICS}${YELLOW}\`globodon/dataminer-eric\`${NONE}"
  echo -e "  ${GREEN}tilpro${NONE}:          New ${BOLD}${BLUE}Tilix${NONE} tab, working directory ${ITALICS}${YELLOW}\`globodon/dataminer-eric/web/src/test/js/\`${NONE}"
  echo -e "  ${GREEN}tildata${NONE}:         New ${BOLD}${BLUE}Tilix${NONE} tab, working directory ${ITALICS}${YELLOW}\`globodon/datam-afdp\`${NONE}"
  echo -e "  ${GREEN}tilbrb${NONE}:          New ${BOLD}${BLUE}Tilix${NONE} tab, working directory ${ITALICS}${YELLOW}\`globodon/brbweb\`${NONE}"
  echo ""
  echo -e "  ${GREEN}gitbare${NONE}:         ${BOLD}${BLUE}git commands alias ${NONE}for bare git repo ${ITALICS}${YELLOW}\`dotfiles\`${NONE}"
  echo ""
  echo -e "  ${GREEN}mkcd${NONE}:            ${BOLD}${BLUE}mkdir && cd${NONE} Make a new directory and cd into it"
  echo -e "  ${GREEN}myip${NONE}:            ${BOLD}${BLUE}myip${NONE} ${ITALICS}${YELLOW}External IP${NONE} [i] ${ITALICS}${YELLOW}Internal IP${NONE}"
  echo ""
  echo -e "  ${GREEN}mount-ext${NONE}:       ${BOLD}${BLUE}mount ${NONE} ${ITALICS}${YELLOW}/dev/sda1${NONE} to ${ITALICS}${YELLOW}~/my/external${NONE}"
  echo -e "  ${GREEN}umount-ext${NONE}:      ${BOLD}${BLUE}umount ${NONE} ${ITALICS}${YELLOW}~/my/external${NONE}"
  echo ""
  echo -e "  ${GREEN}setps1${NONE}:          ${BOLD}${BLUE}SET PS1=${NONE}\"${ITALICS}${YELLOW}COLOR_(ROYGBIV) PROMPT_TEXT\"${NONE}"
  echo ""
  echo -e "  ${GREEN}gs${NONE}:              ${BOLD}${BLUE}git status${NONE} ${ITALICS}${YELLOW}- OR -${NONE} ${BOLD}${BLUE}ls -la${NONE}"
  echo -e "  ${GREEN}atgloboconfig${NONE}:   ${BOLD}${BLUE}git config local email to: ${NONE} ${ITALICS}${YELLOW}avandrey@globodon.com${NONE}"
  echo -e "  ${GREEN}atgithubconfig${NONE}:  ${BOLD}${BLUE}git config local email to: ${NONE} ${ITALICS}${YELLOW}aaron.vandrey@gmail.com${NONE}"
}

# terminal
function join_array { local IFS="$1"; shift; echo "$*"; }

function ellipsedPath {
  local w=""
  local paths=""
  OIFS="$IFS"
  IFS=" "
  read -r -a paths <<< "$(echo "$PWD" | tr "/" " ")"

  wai=$(whoami)
  if [ "${paths[0]}" == "home" ] && [ "${paths[1]}" == "${wai}" ]; then
    w='~'
    read -r -a paths <<< "${paths[*]:2}"
  else
    w="/${paths[0]}"
    read -r -a paths <<< "${paths[*]:1}"
  fi;

  if (( ${#paths[@]} >= 3 )); then
    w="$w/..."
    read -r -a paths <<< "${paths[@]: -2}"
  fi;

  w=$(join_array '/' "$w" "${paths[@]}")
  IFS="$OIFS"

  echo "$w"
}

# git
function gitIsAhead() {
  (git status 2>/dev/null | grep -q 'ahead' && echo "true") || echo ""
}

function gitIsBehind {
  (git status 2>/dev/null | grep -q 'behind' && echo "true") || echo ""
}

function gitNumCommitsDiff {
  (git status 2>/dev/null | grep -E -o "by\s[0-9]+\s" | cut -d' ' -f2) || echo ""
}

function gitCurrentBranch {
  (git branch 2>/dev/null | grep -i '\*' | cut -d' ' -f2) || echo ""
}

function gitDiffRemote {
  local num=
  local isAhead=
  local isBehind=
  local symbol=
  local color=

  num=$(gitNumCommitsDiff)
  isAhead=$(gitIsAhead)
  isBehind=$(gitIsBehind)

  if [ "$isAhead" = "true" ]; then
    color=$GREEN
    symbol="\xE2\x86\x91"
  fi;

  if [ "$isBehind" = "true" ]; then
    color=$YELLOW
    symbol="\xE2\x86\x93"
  fi;

  echo -e "$color$symbol$num$NONE"
}

function hashtag {
  echo "#"
}

function currentTime {
  echo "[$BLUE\@$NONE]"
}

function userHost {
  echo "\u"
}

function seperator {
  printf '%.s‚ïê' $(seq 1 "$(tput cols)")
}

PromptString1="$HOTPINK$(seperator)$NONE\n$(currentTime) $(userHost) : \$(ellipsedPath)$GRAY$(hashtag)$NONE\$(gitDiffRemote)$NONE$ \[$(tput sgr0)\]"
export PS1=${PromptString1}
export SUDO_EDITOR="/usr/bin/gedit"

# set PATH so it includes user's private bin directories
PATH=$PATH:$HOME/bin:$HOME/.local/bin:$HOME/.local/scripts
